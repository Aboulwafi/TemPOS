<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="clr-namespace:PosControls">

    <!-- Default Style for a TextBlock -->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableLabelForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableDisabledLabelForegroundBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>           
    
    <!-- Default Style for a Label -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableLabelForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableDisabledLabelForegroundBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Default Style for a GroupBox -->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableLabelForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableDisabledLabelForegroundBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Default Style for a Border -->
    <Style TargetType="{x:Type Border}">
        <Setter Property="BorderBrush">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableBorderBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="CornerRadius" Value="4,4,4,4" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableDisabledBorderBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Base Style for Button and ToggleButton -->
    <Style x:Key="buttonStyleCore">
        <Setter Property="Control.FontSize" Value="14" />
        <Setter Property="Control.FontFamily" Value="Century Schoolbook" />
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableBorderBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableButtonBackgroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableButtonForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1,1,1,1" />
    </Style>

    <!-- Normal Style for a Button -->
    <Style x:Key="buttonStyleNormal" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonStyleCore}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="4" />
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                            
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableButtonForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableDisabledButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default Style for a Button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource buttonStyleNormal}">
    </Style>
    
    <!-- Button Style with no IsPressed Trigger -->
    <Style TargetType="{x:Type Button}" x:Key="buttonStylePlain" BasedOn="{StaticResource buttonStyleCore}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="4" />
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                            
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableDisabledButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Default Style for a ToggleButton -->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource buttonStyleCore}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="4" />
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                            
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableEnabledSelectedButtonForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableSelectedButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableDisabledButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableDisabledSelectedButtonForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableDisabledSelectedButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableButtonForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableButtonForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableSelectedButtonBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleButton Style for Tab ToggleButtons -->
    <Style TargetType="{x:Type ToggleButton}" x:Key="tabToggleButtonStyle">
        <Setter Property="Control.FontSize" Value="14" />
        <Setter Property="Control.FontFamily" Value="Century Schoolbook" />
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableBorderBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableTabButtonBackgroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableTabButtonForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1,1,1,1" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderThickness="1,1,1,0" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="4,4,0,0" />
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                            
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonSelectedForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonSelectedBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonDisabledForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonDisabledBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonDisabledSelectedForegroundBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding ElementName="Configuration" Path="BindableTabButtonDisabledSelectedBackgroundBrush" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Default Style for FormattedListBoxItem, Note: TicketItemTemplate Style is in App.xaml -->
    <Style TargetType="{x:Type my:FormattedListBoxItem}">
        <Setter Property="Control.FontSize" Value="14" />
        <Setter Property="Control.FontFamily" Value="Century Schoolbook" />
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableBorderBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableListItemBackgroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <Binding ElementName="Configuration" Path="BindableListItemForegroundBrush" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1,1,1,1" />
        <Style.Triggers>
            <!-- Tag=Null is the same as IsSelected=True -->
            <Trigger Property="Tag" Value="{x:Null}">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemSelectedForegroundBrush" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Background">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemSelectedBackgroundBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemDisabledForegroundBrush" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Background">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemDisabledBackgroundBrush" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="false" />
                    <!-- Tag=Null is the same as IsSelected=True -->
                    <Condition Property="Tag" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemDisabledSelectedForegroundBrush" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Background">
                    <Setter.Value>
                        <Binding ElementName="Configuration" Path="BindableListItemDisabledSelectedBackgroundBrush" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>        
    </Style>

    <!-- Default Style for CustomTextBox -->
    <Style TargetType="{x:Type my:CustomTextBox}">
        <Setter Property="Height" Value="30" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!-- Default Style for PushComboBox -->
    <Style TargetType="{x:Type my:PushComboBox}">
        <Setter Property="Height" Value="30" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!-- Default Style for PushComboBox -->
    <Style TargetType="{x:Type my:PushRadioButton}">
        <Setter Property="FontSize" Value="14" />
    </Style>

</ResourceDictionary>